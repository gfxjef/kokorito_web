import requests
import json
from time import sleep

# Configuraci√≥n de la API
BASE_URL = "http://localhost:8000"
API_BASE = f"{BASE_URL}/api/v1"

def test_endpoint(url, description):
    """Funci√≥n para probar un endpoint y mostrar resultados"""
    print(f"\nüîó Probando: {description}")
    print(f"üì° URL: {url}")
    
    try:
        response = requests.get(url, timeout=10)
        print(f"‚úÖ Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if 'count' in data:
                print(f"üìä Registros encontrados: {data['count']}")
            print(f"üîç Muestra de respuesta:")
            print(json.dumps(data, indent=2, ensure_ascii=False)[:500] + "...")
        else:
            print(f"‚ùå Error: {response.text}")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error de conexi√≥n: {e}")

def main():
    """Funci√≥n principal para probar todos los endpoints"""
    
    print("üöÄ INICIANDO PRUEBAS DE API KOKORITO")
    print("=" * 60)
    
    # Lista de endpoints para probar
    tests = [
        # Endpoint ra√≠z
        (f"{BASE_URL}/", "Endpoint ra√≠z"),
        (f"{API_BASE}/health", "Estado de salud de la API"),
        
        # Categor√≠as
        (f"{API_BASE}/categorias", "Todas las categor√≠as"),
        (f"{API_BASE}/categorias/1", "Categor√≠a por ID (1)"),
        (f"{API_BASE}/categorias/destacadas/list", "Categor√≠as destacadas"),
        
        # Productos
        (f"{API_BASE}/productos", "Todos los productos"),
        (f"{API_BASE}/productos/1", "Producto por ID (1)"),
        (f"{API_BASE}/productos/destacados/list", "Productos destacados"),
        (f"{API_BASE}/productos/categoria/1", "Productos de categor√≠a 1"),
        
        # Rellenos
        (f"{API_BASE}/rellenos", "Todos los rellenos"),
        (f"{API_BASE}/rellenos/disponibles/list", "Rellenos disponibles"),
        (f"{API_BASE}/rellenos/producto/1", "Rellenos para producto 1"),
        
        # Tama√±os
        (f"{API_BASE}/tama√±os", "Todos los tama√±os"),
        (f"{API_BASE}/tama√±os/disponibles/list", "Tama√±os disponibles"),
        (f"{API_BASE}/tama√±os/producto/1", "Tama√±os para producto 1"),
        
        # Testimonios
        (f"{API_BASE}/testimonios", "Todos los testimonios"),
        (f"{API_BASE}/testimonios/publicos/list", "Testimonios p√∫blicos"),
        (f"{API_BASE}/testimonios/producto/1", "Testimonios del producto 1"),
        
        # Im√°genes
        (f"{API_BASE}/producto-imagenes", "Todas las im√°genes"),
        (f"{API_BASE}/producto-imagenes/producto/1", "Im√°genes del producto 1"),
        
        # Relaciones
        (f"{API_BASE}/producto-rellenos", "Relaciones producto-relleno"),
        (f"{API_BASE}/producto-tama√±os", "Relaciones producto-tama√±o"),
    ]
    
    # Contador de resultados
    total_tests = len(tests)
    passed_tests = 0
    
    # Ejecutar todas las pruebas
    for url, description in tests:
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                passed_tests += 1
                test_endpoint(url, description)
            else:
                print(f"\n‚ùå FALLO: {description}")
                print(f"üì° URL: {url}")
                print(f"üî¥ Status: {response.status_code}")
                
        except Exception as e:
            print(f"\n‚ùå ERROR: {description}")
            print(f"üì° URL: {url}")
            print(f"üî¥ Error: {e}")
        
        sleep(0.5)  # Pausa breve entre pruebas
    
    # Resumen final
    print("\n" + "=" * 60)
    print("üìã RESUMEN DE PRUEBAS")
    print("=" * 60)
    print(f"‚úÖ Pruebas exitosas: {passed_tests}/{total_tests}")
    print(f"‚ùå Pruebas fallidas: {total_tests - passed_tests}")
    print(f"üìä Porcentaje de √©xito: {(passed_tests/total_tests)*100:.1f}%")
    
    if passed_tests == total_tests:
        print("\nüéâ ¬°TODAS LAS PRUEBAS PASARON!")
        print("‚úÖ La API est√° funcionando correctamente")
    else:
        print("\n‚ö†Ô∏è  Algunas pruebas fallaron")
        print("üí° Revisa la configuraci√≥n de la base de datos y el servidor")
    
    print("\nüìñ Documentaci√≥n disponible en: http://localhost:8000/docs")

if __name__ == "__main__":
    main() 